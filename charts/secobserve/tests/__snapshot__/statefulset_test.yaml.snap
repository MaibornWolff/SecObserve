should exclude initContainer dbchecker if disabled:
  1: |
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 1.30.1
        com.secobserve.tenant: secobserve
        helm.sh/chart: secobserve-1.0.0
      name: secobserve-sts
      namespace: NAMESPACE
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: RELEASE-NAME
          com.secobserve.tenant: secobserve
      serviceName: secobserve-svc
      template:
        metadata:
          annotations: null
          labels:
            app.kubernetes.io/instance: RELEASE-NAME
            com.secobserve.tenant: secobserve
        spec:
          containers:
            - env:
                - name: API_BASE_URL
                  value: https://secobserve.dev/api
                - name: OIDC_ENABLED
                  value: "true"
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_REDIRECT_URI
                  value: https://secobserve.dev/
                - name: OIDC_POST_LOGOUT_REDIRECT_URI
                  value: https://secobserve.dev/
              image: docker.io/maibornwolff/secobserve-frontend:1.30.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: frontend
              ports:
                - containerPort: 3000
                  name: frontend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 500m
                  memory: 1000Mi
                requests:
                  cpu: 500m
                  memory: 1000Mi
              volumeMounts: null
            - env:
                - name: ADMIN_USER
                  value: admin
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: secobserve-secrets
                - name: ADMIN_EMAIL
                  value: admin@admin.com
                - name: DATABASE_ENGINE
                  value: django.db.backends.postgresql
                - name: DATABASE_HOST
                  value: release-name-postgresql
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_DB
                  value: secobserve
                - name: DATABASE_USER
                  value: secobserve
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: release-name-postgresql
                - name: ALLOWED_HOSTS
                  value: secobserve.dev
                - name: CORS_ALLOWED_ORIGINS
                  value: https://secobserve.dev
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django_secret_key
                      name: secobserve-secrets
                - name: FIELD_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      key: field_encryption_key
                      name: secobserve-secrets
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_USERNAME
                  value: preferred_username
                - name: OIDC_FIRST_NAME
                  value: given_name
                - name: OIDC_LAST_NAME
                  value: family_name
                - name: OIDC_FULL_NAME
                  value: preferred_username
                - name: OIDC_EMAIL
                  value: email
                - name: OIDC_GROUPS
                  value: groups
              image: docker.io/maibornwolff/secobserve-backend:1.30.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: backend
              ports:
                - containerPort: 5000
                  name: backend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 1000m
                  memory: 1500Mi
                requests:
                  cpu: 1000m
                  memory: 1500Mi
              volumeMounts: null
          volumes: null
      updateStrategy:
        type: RollingUpdate
should include affinity if specified:
  1: |
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 1.30.1
        com.secobserve.tenant: secobserve
        helm.sh/chart: secobserve-1.0.0
      name: secobserve-sts
      namespace: NAMESPACE
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: RELEASE-NAME
          com.secobserve.tenant: secobserve
      serviceName: secobserve-svc
      template:
        metadata:
          annotations: null
          labels:
            app.kubernetes.io/instance: RELEASE-NAME
            com.secobserve.tenant: secobserve
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/e2e-az-name
                        operator: In
                        values:
                          - e2e-az1
                          - e2e-az2
          containers:
            - env:
                - name: API_BASE_URL
                  value: https://secobserve.dev/api
                - name: OIDC_ENABLED
                  value: "true"
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_REDIRECT_URI
                  value: https://secobserve.dev/
                - name: OIDC_POST_LOGOUT_REDIRECT_URI
                  value: https://secobserve.dev/
              image: docker.io/maibornwolff/secobserve-frontend:1.30.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: frontend
              ports:
                - containerPort: 3000
                  name: frontend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 500m
                  memory: 1000Mi
                requests:
                  cpu: 500m
                  memory: 1000Mi
              volumeMounts: null
            - env:
                - name: ADMIN_USER
                  value: admin
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: secobserve-secrets
                - name: ADMIN_EMAIL
                  value: admin@admin.com
                - name: DATABASE_ENGINE
                  value: django.db.backends.postgresql
                - name: DATABASE_HOST
                  value: release-name-postgresql
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_DB
                  value: secobserve
                - name: DATABASE_USER
                  value: secobserve
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: release-name-postgresql
                - name: ALLOWED_HOSTS
                  value: secobserve.dev
                - name: CORS_ALLOWED_ORIGINS
                  value: https://secobserve.dev
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django_secret_key
                      name: secobserve-secrets
                - name: FIELD_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      key: field_encryption_key
                      name: secobserve-secrets
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_USERNAME
                  value: preferred_username
                - name: OIDC_FIRST_NAME
                  value: given_name
                - name: OIDC_LAST_NAME
                  value: family_name
                - name: OIDC_FULL_NAME
                  value: preferred_username
                - name: OIDC_EMAIL
                  value: email
                - name: OIDC_GROUPS
                  value: groups
              image: docker.io/maibornwolff/secobserve-backend:1.30.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: backend
              ports:
                - containerPort: 5000
                  name: backend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 1000m
                  memory: 1500Mi
                requests:
                  cpu: 1000m
                  memory: 1500Mi
              volumeMounts: null
          initContainers:
            - command:
                - sh
                - -c
                - |
                  echo 'Waiting for Database to become ready...'

                  until printf "." && nc -z -w 2 release-name-postgresql 5432; do
                      sleep 2;
                  done;

                  echo 'Database OK ✓'
              image: busybox:latest
              imagePullPolicy: IfNotPresent
              name: dbchecker
              resources:
                limits:
                  cpu: 20m
                  memory: 32Mi
                requests:
                  cpu: 20m
                  memory: 32Mi
              securityContext:
                allowPrivilegeEscalation: false
                runAsGroup: 1000
                runAsNonRoot: true
                runAsUser: 1000
          volumes: null
      updateStrategy:
        type: RollingUpdate
should include initContainer dbchecker if enabled:
  1: |
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 1.30.1
        com.secobserve.tenant: secobserve
        helm.sh/chart: secobserve-1.0.0
      name: secobserve-sts
      namespace: NAMESPACE
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: RELEASE-NAME
          com.secobserve.tenant: secobserve
      serviceName: secobserve-svc
      template:
        metadata:
          annotations: null
          labels:
            app.kubernetes.io/instance: RELEASE-NAME
            com.secobserve.tenant: secobserve
        spec:
          containers:
            - env:
                - name: API_BASE_URL
                  value: https://secobserve.dev/api
                - name: OIDC_ENABLED
                  value: "true"
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_REDIRECT_URI
                  value: https://secobserve.dev/
                - name: OIDC_POST_LOGOUT_REDIRECT_URI
                  value: https://secobserve.dev/
              image: docker.io/maibornwolff/secobserve-frontend:1.30.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: frontend
              ports:
                - containerPort: 3000
                  name: frontend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 500m
                  memory: 1000Mi
                requests:
                  cpu: 500m
                  memory: 1000Mi
              volumeMounts: null
            - env:
                - name: ADMIN_USER
                  value: admin
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: secobserve-secrets
                - name: ADMIN_EMAIL
                  value: admin@admin.com
                - name: DATABASE_ENGINE
                  value: django.db.backends.postgresql
                - name: DATABASE_HOST
                  value: release-name-postgresql
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_DB
                  value: secobserve
                - name: DATABASE_USER
                  value: secobserve
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: release-name-postgresql
                - name: ALLOWED_HOSTS
                  value: secobserve.dev
                - name: CORS_ALLOWED_ORIGINS
                  value: https://secobserve.dev
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django_secret_key
                      name: secobserve-secrets
                - name: FIELD_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      key: field_encryption_key
                      name: secobserve-secrets
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_USERNAME
                  value: preferred_username
                - name: OIDC_FIRST_NAME
                  value: given_name
                - name: OIDC_LAST_NAME
                  value: family_name
                - name: OIDC_FULL_NAME
                  value: preferred_username
                - name: OIDC_EMAIL
                  value: email
                - name: OIDC_GROUPS
                  value: groups
              image: docker.io/maibornwolff/secobserve-backend:1.30.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: backend
              ports:
                - containerPort: 5000
                  name: backend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 1000m
                  memory: 1500Mi
                requests:
                  cpu: 1000m
                  memory: 1500Mi
              volumeMounts: null
          initContainers:
            - command:
                - sh
                - -c
                - |
                  echo 'Waiting for Database to become ready...'

                  until printf "." && nc -z -w 2 localhost 5432; do
                      sleep 2;
                  done;

                  echo 'Database OK ✓'
              image: busybox:latest
              imagePullPolicy: IfNotPresent
              name: dbchecker
              resources:
                limits:
                  cpu: 20m
                  memory: 32Mi
                requests:
                  cpu: 20m
                  memory: 32Mi
              securityContext:
                allowPrivilegeEscalation: false
                runAsGroup: 1000
                runAsNonRoot: true
                runAsUser: 1000
          volumes: null
      updateStrategy:
        type: RollingUpdate
should render frontend and backend containers:
  1: |
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 1.30.1
        com.secobserve.tenant: secobserve
        helm.sh/chart: secobserve-1.0.0
      name: secobserve-sts
      namespace: NAMESPACE
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: RELEASE-NAME
          com.secobserve.tenant: secobserve
      serviceName: secobserve-svc
      template:
        metadata:
          annotations: null
          labels:
            app.kubernetes.io/instance: RELEASE-NAME
            com.secobserve.tenant: secobserve
        spec:
          containers:
            - env:
                - name: API_BASE_URL
                  value: https://secobserve.dev/api
                - name: OIDC_ENABLED
                  value: "true"
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_REDIRECT_URI
                  value: https://secobserve.dev/
                - name: OIDC_POST_LOGOUT_REDIRECT_URI
                  value: https://secobserve.dev/
              image: docker.io/secobserve/frontend:v1.2.3
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: frontend
              ports:
                - containerPort: 3000
                  name: frontend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 500m
                  memory: 1000Mi
                requests:
                  cpu: 500m
                  memory: 1000Mi
              volumeMounts: null
            - env:
                - name: ADMIN_USER
                  value: admin
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: secobserve-secrets
                - name: ADMIN_EMAIL
                  value: admin@admin.com
                - name: DATABASE_ENGINE
                  value: django.db.backends.postgresql
                - name: DATABASE_HOST
                  value: release-name-postgresql
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_DB
                  value: secobserve
                - name: DATABASE_USER
                  value: secobserve
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: release-name-postgresql
                - name: ALLOWED_HOSTS
                  value: secobserve.dev
                - name: CORS_ALLOWED_ORIGINS
                  value: https://secobserve.dev
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django_secret_key
                      name: secobserve-secrets
                - name: FIELD_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      key: field_encryption_key
                      name: secobserve-secrets
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_USERNAME
                  value: preferred_username
                - name: OIDC_FIRST_NAME
                  value: given_name
                - name: OIDC_LAST_NAME
                  value: family_name
                - name: OIDC_FULL_NAME
                  value: preferred_username
                - name: OIDC_EMAIL
                  value: email
                - name: OIDC_GROUPS
                  value: groups
              image: docker.io/secobserve/backend:v1.2.3
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: backend
              ports:
                - containerPort: 5000
                  name: backend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 1000m
                  memory: 1500Mi
                requests:
                  cpu: 1000m
                  memory: 1500Mi
              volumeMounts: null
          initContainers:
            - command:
                - sh
                - -c
                - |
                  echo 'Waiting for Database to become ready...'

                  until printf "." && nc -z -w 2 release-name-postgresql 5432; do
                      sleep 2;
                  done;

                  echo 'Database OK ✓'
              image: busybox:latest
              imagePullPolicy: IfNotPresent
              name: dbchecker
              resources:
                limits:
                  cpu: 20m
                  memory: 32Mi
                requests:
                  cpu: 20m
                  memory: 32Mi
              securityContext:
                allowPrivilegeEscalation: false
                runAsGroup: 1000
                runAsNonRoot: true
                runAsUser: 1000
          volumes: null
      updateStrategy:
        type: RollingUpdate
should render nodeSelector if provided:
  1: |
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 1.30.1
        com.secobserve.tenant: secobserve
        helm.sh/chart: secobserve-1.0.0
      name: secobserve-sts
      namespace: NAMESPACE
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: RELEASE-NAME
          com.secobserve.tenant: secobserve
      serviceName: secobserve-svc
      template:
        metadata:
          annotations: null
          labels:
            app.kubernetes.io/instance: RELEASE-NAME
            com.secobserve.tenant: secobserve
        spec:
          containers:
            - env:
                - name: API_BASE_URL
                  value: https://secobserve.dev/api
                - name: OIDC_ENABLED
                  value: "true"
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_REDIRECT_URI
                  value: https://secobserve.dev/
                - name: OIDC_POST_LOGOUT_REDIRECT_URI
                  value: https://secobserve.dev/
              image: docker.io/maibornwolff/secobserve-frontend:1.30.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: frontend
              ports:
                - containerPort: 3000
                  name: frontend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 500m
                  memory: 1000Mi
                requests:
                  cpu: 500m
                  memory: 1000Mi
              volumeMounts: null
            - env:
                - name: ADMIN_USER
                  value: admin
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: secobserve-secrets
                - name: ADMIN_EMAIL
                  value: admin@admin.com
                - name: DATABASE_ENGINE
                  value: django.db.backends.postgresql
                - name: DATABASE_HOST
                  value: release-name-postgresql
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_DB
                  value: secobserve
                - name: DATABASE_USER
                  value: secobserve
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: release-name-postgresql
                - name: ALLOWED_HOSTS
                  value: secobserve.dev
                - name: CORS_ALLOWED_ORIGINS
                  value: https://secobserve.dev
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django_secret_key
                      name: secobserve-secrets
                - name: FIELD_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      key: field_encryption_key
                      name: secobserve-secrets
                - name: OIDC_AUTHORITY
                  value: https://oidc.secobserve.dev
                - name: OIDC_CLIENT_ID
                  value: secobserve
                - name: OIDC_USERNAME
                  value: preferred_username
                - name: OIDC_FIRST_NAME
                  value: given_name
                - name: OIDC_LAST_NAME
                  value: family_name
                - name: OIDC_FULL_NAME
                  value: preferred_username
                - name: OIDC_EMAIL
                  value: email
                - name: OIDC_GROUPS
                  value: groups
              image: docker.io/maibornwolff/secobserve-backend:1.30.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 300
                timeoutSeconds: 5
              name: backend
              ports:
                - containerPort: 5000
                  name: backend-http
              readinessProbe:
                failureThreshold: 12
                httpGet:
                  path: /
                  port: 5000
                initialDelaySeconds: 20
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 1000m
                  memory: 1500Mi
                requests:
                  cpu: 1000m
                  memory: 1500Mi
              volumeMounts: null
          initContainers:
            - command:
                - sh
                - -c
                - |
                  echo 'Waiting for Database to become ready...'

                  until printf "." && nc -z -w 2 release-name-postgresql 5432; do
                      sleep 2;
                  done;

                  echo 'Database OK ✓'
              image: busybox:latest
              imagePullPolicy: IfNotPresent
              name: dbchecker
              resources:
                limits:
                  cpu: 20m
                  memory: 32Mi
                requests:
                  cpu: 20m
                  memory: 32Mi
              securityContext:
                allowPrivilegeEscalation: false
                runAsGroup: 1000
                runAsNonRoot: true
                runAsUser: 1000
          nodeSelector:
            disktype: ssd
          volumes: null
      updateStrategy:
        type: RollingUpdate
