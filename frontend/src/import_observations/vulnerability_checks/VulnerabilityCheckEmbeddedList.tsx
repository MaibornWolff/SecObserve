import {
    Datagrid,
    DateField,
    FilterForm,
    FunctionField,
    ListContextProvider,
    NumberField,
    ReferenceInput,
    ResourceContextProvider,
    TextField,
    TextInput,
    useListController,
} from "react-admin";

import { CustomPagination } from "../../commons/custom_fields/CustomPagination";
import { humanReadableDate } from "../../commons/functions";
import { feature_license_management } from "../../commons/functions";
import { AutocompleteInputMedium } from "../../commons/layout/themes";
import { getSettingListSize } from "../../commons/user_settings/functions";
import { VulnerabilityCheck } from "../types";

type VulnerabilityCheckEmbeddedListProps = {
    product: any;
    long_list: boolean;
};

const VulnerabilityCheckEmbeddedList = ({ product, long_list }: VulnerabilityCheckEmbeddedListProps) => {
    function listFilters(product: any) {
        const filters = [];
        if (product?.has_branches) {
            filters.push(
                <ReferenceInput
                    source="branch"
                    reference="branches"
                    queryOptions={{ meta: { api_resource: "branch_names" } }}
                    sort={{ field: "name", order: "ASC" }}
                    filter={{ product: product.id }}
                    alwaysOn
                >
                    <AutocompleteInputMedium optionText="name" label="Branch / Version" />
                </ReferenceInput>
            );
        }
        filters.push(<TextInput source="scanner" alwaysOn />);
        filters.push(<TextInput source="filename" alwaysOn />);
        if (product?.has_api_configurations) {
            filters.push(<TextInput source="api_configuration_name" label="API configuration name" alwaysOn />);
        }

        return filters;
    }

    const listContext = useListController({
        filter: { product: Number(product.id) },
        perPage: 25,
        resource: "vulnerability_checks",
        sort: { field: "last_import", order: "DESC" },
        filterDefaultValues: {},
        disableSyncWithLocation: true,
        storeKey: "vulnerability_checks.embedded",
    });

    if (listContext.isLoading) {
        return <div>Loading...</div>;
    }

    function get_observations_url(vulnerability_check: any): string {
        if (vulnerability_check.branch == null) {
            return `..?displayedFilters=%7B%7D&filter=%7B%22current_status%22%3A%22Open%22%2C%22scanner%22%3A%22${vulnerability_check.scanner_name}%22%2C%22upload_filename%22%3A%22${vulnerability_check.filename}%22%2C%22api_configuration_name%22%3A%22${vulnerability_check.api_configuration_name}%22%7D&order=ASC&sort=current_severity`;
        }
        return `..?displayedFilters=%7B%7D&filter=%7B%22current_status%22%3A%22Open%22%2C%22branch%22%3A%22${vulnerability_check.branch}%22%2C%22scanner%22%3A%22${vulnerability_check.scanner_name}%22%2C%22upload_filename%22%3A%22${vulnerability_check.filename}%22%2C%22api_configuration_name%22%3A%22${vulnerability_check.api_configuration_name}%22%7D&order=ASC&sort=current_severity`;
    }

    return (
        <ResourceContextProvider value="vulnerability_checks">
            <ListContextProvider value={listContext}>
                <div style={{ width: "100%" }}>
                    <FilterForm filters={listFilters(product)} />
                    <Datagrid
                        size={getSettingListSize()}
                        sx={{ width: "100%" }}
                        bulkActionButtons={false}
                        rowClick={(id, resource, record) => get_observations_url(record)}
                        resource="vulnerability_checks"
                    >
                        {product?.has_branches && <TextField source="branch_name" label="Branch / Version" />}
                        <TextField source="scanner_name" label="Scanner" />
                        {long_list && <TextField source="filename" />}
                        {long_list && product?.has_api_configurations && (
                            <TextField source="api_configuration_name" label="API configuration name" />
                        )}
                        <NumberField source="last_import_observations_new" label="Obs. new" />
                        <NumberField source="last_import_observations_updated" label="Obs updated" />
                        <NumberField source="last_import_observations_resolved" label="Obs. resolved" />
                        {feature_license_management() && product.has_licenses && (
                            <NumberField source="last_import_licenses_new" label="Lic. new" />
                        )}
                        {feature_license_management() && product.has_licenses && (
                            <NumberField source="last_import_licenses_updated" label="Lic. updated" />
                        )}
                        {feature_license_management() && product.has_licenses && (
                            <NumberField source="last_import_licenses_deleted" label="Lic. deleted" />
                        )}
                        {long_list && <DateField source="last_import" showTime />}
                        {!long_list && (
                            <FunctionField<VulnerabilityCheck>
                                label="Last import"
                                sortBy="last_import"
                                render={(record) => (record ? humanReadableDate(record.last_import) : "")}
                            />
                        )}
                    </Datagrid>
                    <CustomPagination />
                </div>
            </ListContextProvider>
        </ResourceContextProvider>
    );
};

export default VulnerabilityCheckEmbeddedList;
