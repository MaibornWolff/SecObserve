name: Build and push release images

on:
  workflow_dispatch:
    inputs:
      #checkov:skip=CKV_GHA_7:This is a false positive
      release:
        description: 'SecObserve release (without the v)'
        required: true

permissions: read-all

jobs:
  docker_backend_release:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: 'v${{ github.event.inputs.release }}'
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      -
        name: Login to Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set current date as env variable
        run: echo "CREATED=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
      -
        name: Build and push backend
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./docker/backend/prod/django/Dockerfile
          push: true
          tags: |
            maibornwolff/secobserve-backend:${{ github.event.inputs.release }}
            maibornwolff/secobserve-backend:latest
          build-args: |
            CREATED=${{ env.CREATED }}
            REVISION=${{ github.sha }}
            VERSION=${{ github.event.inputs.release }}

  docker_frontend_release:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: 'v${{ github.event.inputs.release }}'
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      -
        name: Login to Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set current date as env variable
        run: echo "CREATED=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
      -
        name: Build and push frontend
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./docker/frontend/prod/Dockerfile
          push: true
          tags: |
            maibornwolff/secobserve-frontend:${{ github.event.inputs.release }}
            maibornwolff/secobserve-frontend:latest
          build-args: |
            CREATED=${{ env.CREATED }}
            REVISION=${{ github.sha }}
            VERSION=${{ github.event.inputs.release }}

  vulnerability_scans_release:
    runs-on: ubuntu-latest
    needs: [docker_backend_release, docker_frontend_release]
    steps:
      -
        name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: 'v${{ github.event.inputs.release }}'
      - 
        name: Run vulnerability scanners for images
        uses: MaibornWolff/secobserve_actions_templates/actions/vulnerability_scanner@0ddd05df5a723a3e38cc2cff23c8653519289f13 # main
        with:
          so_configuration: 'so_configuration_sca_current.yml'
          SO_API_TOKEN: ${{ secrets.SO_API_TOKEN }}
      - 
        name: Run vulnerability scanners for endpoints
        uses: MaibornWolff/secobserve_actions_templates/actions/vulnerability_scanner@0ddd05df5a723a3e38cc2cff23c8653519289f13 # main
        with:
          so_configuration: 'so_configuration_endpoints.yml'
          SO_API_TOKEN: ${{ secrets.SO_API_TOKEN }}

  generate_sboms:
    runs-on: ubuntu-latest
    needs: [docker_backend_release, docker_frontend_release]
    permissions:
      contents: write
    steps:
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 24
      -
        name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: 'v${{ github.event.inputs.release }}'
      - 
        name: Install programs
        env:
          CDXGEN_VERSION: 11.2.3
          TRIVY_VERSION: 0.61.0
          SBOM_UTILITY_VERSION: 0.17.0
          CYCLONE_DX_CLI_VERSION: 0.27.2
        run: |
          npm install -g @cyclonedx/cdxgen@"$CDXGEN_VERSION"
          cd /usr/local/bin
          wget --no-verbose https://github.com/CycloneDX/sbom-utility/releases/download/v"$SBOM_UTILITY_VERSION"/sbom-utility-v"$SBOM_UTILITY_VERSION"-linux-amd64.tar.gz -O - | tar -zxf -
          wget --no-verbose https://github.com/CycloneDX/cyclonedx-cli/releases/download/v"$CYCLONE_DX_CLI_VERSION"/cyclonedx-linux-x64
          cp cyclonedx-linux-x64 /usr/local/bin/cyclonedx
          chmod +x /usr/local/bin/cyclonedx
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v"$TRIVY_VERSION"
      - 
        name: Generate SBOM for backend application
        env:
          VERSION: ${{ github.event.inputs.release }}
          FETCH_LICENSE: 1
        working-directory: ./sbom
        run: |
          mv ../backend/poetry_requirements.txt ../backend/poetry_requirements.sic
          sed -i "s|REPLACE_VERSION|$VERSION|g" ./configuration/patch_backend_application.json
          cdxgen ../backend --type python --required-only --profile license-compliance --no-auto-compositions --output sbom_backend_application.json --spec-version 1.6
          sbom-utility trim --keys=externalReferences,properties,evidence,authors,lifecycles --quiet --input-file sbom_backend_application.json \
            | sbom-utility patch --patch-file ./configuration/patch_supplier.json --quiet --input-file - \
            | sbom-utility patch --patch-file ./configuration/patch_backend_application.json --quiet --input-file - --output-file sbom_backend_application_"$VERSION".json
          sbom-utility validate --input-file sbom_backend_application_"$VERSION".json
          rm sbom_backend_application.json
          mv ../backend/poetry_requirements.sic ../backend/poetry_requirements.txt
      - 
        name: Generate SBOM for frontend application
        env:
          VERSION: ${{ github.event.inputs.release }}
        working-directory: ./sbom
        run: |
          sed -i "s|REPLACE_VERSION|$VERSION|g" ./configuration/patch_frontend_application.json
          cdxgen ../frontend --type npm --no-babel --required-only --profile license-compliance --no-auto-compositions --project-name secobserve --output sbom_frontend_application.json --spec-version 1.6
          sbom-utility trim --keys=externalReferences,properties,evidence,authors,lifecycles --quiet --input-file sbom_frontend_application.json \
            | sbom-utility patch --patch-file ./configuration/patch_supplier.json --quiet --input-file - \
            | sbom-utility patch --patch-file ./configuration/patch_frontend_application.json --quiet --input-file - --output-file sbom_frontend_application_"$VERSION".json
          sbom-utility validate --input-file sbom_frontend_application_"$VERSION".json
          rm sbom_frontend_application.json
      - 
        name: Generate SBOM for backend container
        env:
          VERSION: ${{ github.event.inputs.release }}
        working-directory: ./sbom
        run: |
          sed -i "s|REPLACE_VERSION|$VERSION|g" ./configuration/patch_backend_container.json
          trivy image --scanners license --pkg-types os --format cyclonedx --output sbom_backend_container.json maibornwolff/secobserve-backend:$VERSION
          sbom-utility trim --keys=externalReferences,properties,evidence,authors,lifecycles,services --quiet --input-file sbom_backend_container.json \
            | sbom-utility patch --patch-file ./configuration/patch_supplier.json --quiet --input-file - \
            | sbom-utility patch --patch-file ./configuration/patch_backend_container.json --quiet --input-file - --output-file sbom_backend_container_"$VERSION".json
          sbom-utility validate --input-file sbom_backend_container_"$VERSION".json
          rm sbom_backend_container.json
      - 
        name: Generate SBOM for frontend container
        env:
          VERSION: ${{ github.event.inputs.release }}
        working-directory: ./sbom
        run: |
          sed -i "s|REPLACE_VERSION|$VERSION|g" ./configuration/patch_frontend_container.json
          trivy image --scanners license --pkg-types os --format cyclonedx --output sbom_frontend_container.json maibornwolff/secobserve-frontend:$VERSION
          sbom-utility trim --keys=externalReferences,properties,evidence,authors,lifecycles,services --quiet --input-file sbom_frontend_container.json \
            | sbom-utility patch --patch-file ./configuration/patch_supplier.json --quiet --input-file - \
            | sbom-utility patch --patch-file ./configuration/patch_frontend_container.json --quiet --input-file - --output-file sbom_frontend_container_"$VERSION".json
          sbom-utility validate --input-file sbom_frontend_container_"$VERSION".json
          rm sbom_frontend_container.json
      - 
        name: Merge SBOMs
        env:
          VERSION: ${{ github.event.inputs.release }}
        working-directory: ./sbom
        run: |
          sed -i "s|REPLACE_VERSION|$VERSION|g" ./configuration/patch_complete.json
          cyclonedx merge --hierarchical --name "SecObserve" --version "$VERSION" --input-files sbom_backend_application_"$VERSION".json sbom_frontend_application_"$VERSION".json sbom_backend_container_"$VERSION".json sbom_frontend_container_"$VERSION".json --output-format json \
            | sbom-utility trim --keys=declarations,definitions --quiet --input-file - \
            | sbom-utility patch --patch-file ./configuration/patch_supplier.json --quiet --input-file - \
            | sbom-utility patch --patch-file ./configuration/patch_complete.json --quiet --input-file - --output-file sbom_"$VERSION".json
          sbom-utility validate --input-file sbom_"$VERSION".json
      -
        name: Commit SBOMs
        uses: stefanzweifel/git-auto-commit-action@b863ae1933cb653a53c021fe36dbb774e1fb9403 # v5
        with:
          skip_fetch: true
          create_branch: true
          commit_message: "chore: generate SBOMs for release ${{ github.event.inputs.release }}"
          branch: "chore/sboms_release_${{ github.event.inputs.release }}"
          file_pattern: "sbom/sbom*.json"
      # -
      #   name: Merge SBOM branch into main and delete branch
      #   uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      #   env:
      #     VERSION: ${{ github.event.inputs.release }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const sbomBranch = `chore/sboms_release_${process.env.VERSION}`;
      #       const targetBranch = 'main';
            
      #       console.log(`Merging branch ${sbomBranch} into ${targetBranch}`);
            
      #       try {
      #         // Merge the SBOM branch into main
      #         await github.rest.repos.merge({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           base: targetBranch,
      #           head: sbomBranch,
      #           commit_message: `chore: merge SBOM files for release ${process.env.VERSION}`
      #         });
              
      #         console.log(`Successfully merged ${sbomBranch} into ${targetBranch}`);
              
      #         // Delete the SBOM branch after successful merge
      #         console.log(`Deleting branch ${sbomBranch}`);
      #         await github.rest.git.deleteRef({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           ref: `heads/${sbomBranch}`
      #         });
              
      #         console.log(`Successfully deleted branch ${sbomBranch}`);
      #       } catch (error) {
      #         console.error(`Error during merge or branch deletion: ${error.message}`);
      #         core.setFailed(error.message);
      #       }
      -
        name: Add SBOMs to GitHub Release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          VERSION: ${{ github.event.inputs.release }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const version = process.env.VERSION;
            const releaseTag = `v${version}`;
            
            console.log(`Adding SBOMs to GitHub release ${releaseTag}`);
            
            try {
              // Get the release by tag
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: releaseTag
              });
              
              // SBOM files to upload
              const sbomFiles = [
                `sbom_backend_application_${version}.json`,
                `sbom_frontend_application_${version}.json`,
                `sbom_backend_container_${version}.json`,
                `sbom_frontend_container_${version}.json`,
                `sbom_${version}.json`
              ];
              
              // Upload each SBOM file to the release
              for (const file of sbomFiles) {
                const filePath = path.join('./sbom', file);
                
                console.log(`Uploading ${filePath} to release ${releaseTag}`);
                
                const fileContent = fs.readFileSync(filePath);
                
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  name: file,
                  data: fileContent
                });
                
                console.log(`Successfully uploaded ${file} to release ${releaseTag}`);
              }
            } catch (error) {
              console.error(`Error adding SBOMs to release: ${error.message}`);
              core.setFailed(error.message);
            }
