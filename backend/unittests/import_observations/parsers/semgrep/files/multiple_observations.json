{
    "version": "1.100.0",
    "results": [
        {
            "check_id": "python.lang.correctness.return-in-init.return-in-init",
            "path": "application/api/utils.py",
            "start": {
                "line": 10,
                "col": 44,
                "offset": 398
            },
            "end": {
                "line": 10,
                "col": 95,
                "offset": 449
            },
            "extra": {
                "message": "`return` should never appear inside a class __init__ function. This will cause a runtime error.",
                "metadata": {
                    "category": "correctness",
                    "technology": [
                        "python"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "source": "https://semgrep.dev/r/python.lang.correctness.return-in-init.return-in-init",
                    "shortlink": "https://sg.run/4xwl",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9600,
                            "rule_id": "AbUzYe",
                            "rv_id": 946298,
                            "url": "https://semgrep.dev/playground/r/O9TX3WW/python.lang.correctness.return-in-init.return-in-init",
                            "version_id": "O9TX3WW"
                        }
                    }
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
            "path": "application/management/commands/command.py",
            "start": {
                "line": 62,
                "col": 17,
                "offset": 3082
            },
            "end": {
                "line": 62,
                "col": 62,
                "offset": 3127
            },
            "extra": {
                "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
                        "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
                        "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
                    ],
                    "category": "security",
                    "technology": [
                        "sqlalchemy"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
                    "shortlink": "https://sg.run/2b1L",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 10563,
                            "rule_id": "oqUz5y",
                            "rv_id": 946452,
                            "url": "https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
                            "version_id": "8KTKj19"
                        }
                    }
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
            "path": "application/tools/functions.py",
            "start": {
                "line": 45,
                "col": 24,
                "offset": 1496
            },
            "end": {
                "line": 46,
                "col": 34,
                "offset": 1580
            },
            "extra": {
                "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                "metadata": {
                    "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
                    "cwe": [
                        "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
                    ],
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "bandit-code": "B303",
                    "asvs": {
                        "control_id": "6.2.2 Insecure Custom Algorithm",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
                        "section": "V6 Stored Cryptography Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
                        "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
                        "http://2012.sharcs.org/slides/stevens.pdf",
                        "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
                    ],
                    "category": "security",
                    "technology": [
                        "python"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cryptographic Issues",
                        "Other Issues"
                    ],
                    "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
                    "shortlink": "https://sg.run/vYrY",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 33633,
                            "rule_id": "PeU2e2",
                            "rv_id": 946401,
                            "url": "https://semgrep.dev/playground/r/vdTGnR5/python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
                            "version_id": "vdTGnR5"
                        }
                    }
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "python.lang.security.use-defusedcsv.use-defusedcsv",
            "path": "application/management/commands/command.py",
            "start": {
                "line": 33,
                "col": 18,
                "offset": 820
            },
            "end": {
                "line": 33,
                "col": 50,
                "offset": 852
            },
            "extra": {
                "message": "Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.",
                "fix": "defusedcsv.writer(open(file_path, 'w'))",
                "metadata": {
                    "cwe": [
                        "CWE-1236: Improper Neutralization of Formula Elements in a CSV File"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://github.com/raphaelm/defusedcsv",
                        "https://owasp.org/www-community/attacks/CSV_Injection",
                        "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"
                    ],
                    "category": "security",
                    "technology": [
                        "python"
                    ],
                    "confidence": "LOW",
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/python.lang.security.use-defusedcsv.use-defusedcsv",
                    "shortlink": "https://sg.run/GzRn",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 31148,
                            "rule_id": "gxUrAb",
                            "rv_id": 946409,
                            "url": "https://semgrep.dev/playground/r/gETe1DO/python.lang.security.use-defusedcsv.use-defusedcsv",
                            "version_id": "gETe1DO"
                        }
                    }
                },
                "severity": "INFO",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        }
    ]
}
