from typing import Optional

from application.core.models import Observation
from application.core.queries.observation import get_current_observation_log
from application.vex.services.csaf_helpers import (
    get_product_or_relationship_id,
    get_vulnerability_ecosystem,
    map_status,
)
from application.vex.services.vex_base import get_vulnerability_url
from application.vex.types import (
    CSAF_Status,
    CSAFFlag,
    CSAFId,
    CSAFNote,
    CSAFProductStatus,
    CSAFReference,
    CSAFThreat,
    CSAFVulnerability,
)


def create_vulnerability(vulnerability_name) -> CSAFVulnerability:
    product_status = CSAFProductStatus(
        fixed=[], known_affected=[], known_not_affected=[], under_investigation=[]
    )
    if vulnerability_name.startswith("CVE"):
        vulnerability = CSAFVulnerability(
            cve=vulnerability_name,
            product_status=product_status,
            notes=[],
            flags=[],
            ids=[],
            references=[],
            remediations=[],
            threats=[],
        )
    else:
        vulnerability_id = CSAFId(
            text=vulnerability_name,
            system_name=get_vulnerability_ecosystem(vulnerability_name),
        )
        vulnerability = CSAFVulnerability(
            cve=None,
            product_status=product_status,
            notes=[],
            flags=[],
            ids=[vulnerability_id],
            references=[],
            remediations=[],
            threats=[],
        )
    reference_url = get_vulnerability_url(vulnerability_name)
    if reference_url:
        reference = CSAFReference(
            category="external", url=reference_url, summary="Security Advisory"
        )
        vulnerability.references.append(reference)

    return vulnerability


def set_vulnerability_description(
    vulnerability: CSAFVulnerability,
    observation: Observation,
    current_vulnerability_description: Optional[str],
) -> str:
    if (
        not current_vulnerability_description
        or current_vulnerability_description == "No description available"
    ):
        description = (
            observation.description
            if observation.description
            else "No description available"
        )
        current_vulnerability_description = description
        csaf_note = CSAFNote(
            category="description",
            text=description,
        )
        vulnerability.notes.append(csaf_note)

    return current_vulnerability_description


def set_product_status(vulnerability: CSAFVulnerability, observation: Observation):
    csaf_status = map_status(observation.current_status)
    product_or_relationship_id = get_product_or_relationship_id(observation)
    if csaf_status == CSAF_Status.CSAF_STATUS_NOT_AFFECTED:
        if (
            product_or_relationship_id
            not in vulnerability.product_status.known_not_affected
        ):
            vulnerability.product_status.known_not_affected.append(
                product_or_relationship_id
            )
    elif csaf_status == CSAF_Status.CSAF_STATUS_AFFECTED:
        if (
            product_or_relationship_id
            not in vulnerability.product_status.known_affected
        ):
            vulnerability.product_status.known_affected.append(
                product_or_relationship_id
            )
    elif csaf_status == CSAF_Status.CSAF_STATUS_FIXED:
        if product_or_relationship_id not in vulnerability.product_status.fixed:
            vulnerability.product_status.fixed.append(product_or_relationship_id)
    elif csaf_status == CSAF_Status.CSAF_STATUS_UNDER_INVESTIGATION:
        if (
            product_or_relationship_id
            not in vulnerability.product_status.under_investigation
        ):
            vulnerability.product_status.under_investigation.append(
                product_or_relationship_id
            )


def remove_conflicting_product_status(vulnerability: CSAFVulnerability):
    product_ids = []

    for product_id in vulnerability.product_status.known_affected:
        product_ids.append(product_id)

    under_investigation_product_ids = []
    for product_id in vulnerability.product_status.under_investigation:
        if product_id not in product_ids:
            under_investigation_product_ids.append(product_id)
            product_ids.append(product_id)
    vulnerability.product_status.under_investigation = under_investigation_product_ids

    known_not_affected_product_ids = []
    for product_id in vulnerability.product_status.known_not_affected:
        if product_id not in product_ids:
            known_not_affected_product_ids.append(product_id)
            product_ids.append(product_id)
    vulnerability.product_status.known_not_affected = known_not_affected_product_ids

    fixed_product_ids = []
    for product_id in vulnerability.product_status.fixed:
        if product_id not in product_ids:
            fixed_product_ids.append(product_id)
            product_ids.append(product_id)
    vulnerability.product_status.fixed = fixed_product_ids


def set_flag_or_threat(vulnerability: CSAFVulnerability, observation: Observation):
    csaf_status = map_status(observation.current_status)
    if csaf_status == CSAF_Status.CSAF_STATUS_NOT_AFFECTED:
        product_or_relationship_id = get_product_or_relationship_id(observation)
        observation_log = get_current_observation_log(observation)
        if observation_log and observation_log.vex_justification:
            found = False
            for flag in vulnerability.flags:
                if flag.label == observation_log.vex_justification:
                    if product_or_relationship_id not in flag.product_ids:
                        flag.product_ids.append(product_or_relationship_id)
                    found = True
                    break
            if not found:
                csaf_flag = CSAFFlag(
                    label=observation_log.vex_justification,
                    product_ids=[product_or_relationship_id],
                )
                vulnerability.flags.append(csaf_flag)
        else:
            category = "impact"
            details = (
                observation_log.comment
                if observation_log and observation_log.comment
                else "No justification available"
            )
            found = False
            for threat in vulnerability.threats:
                if threat.category == category and threat.details == details:
                    if product_or_relationship_id not in threat.product_ids:
                        threat.product_ids.append(product_or_relationship_id)
                    found = True
                    break
            if not found:
                threat = CSAFThreat(
                    category=category,
                    details=details,
                    product_ids=[product_or_relationship_id],
                )
                vulnerability.threats.append(threat)
