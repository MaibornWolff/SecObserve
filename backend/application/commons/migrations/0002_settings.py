# Generated by Django 4.2.11 on 2024-04-19 19:52

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("commons", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Settings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "security_gate_active",
                    models.BooleanField(
                        default=True, help_text="Is the security gate activated?"
                    ),
                ),
                (
                    "security_gate_threshold_critical",
                    models.IntegerField(
                        default=0,
                        help_text="Number of critical observations that must not be exceeded",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "security_gate_threshold_high",
                    models.IntegerField(
                        default=0,
                        help_text="Number of high observations that must not be exceeded",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "security_gate_threshold_medium",
                    models.IntegerField(
                        default=99999,
                        help_text="Number of medium observations that must not be exceeded",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "security_gate_threshold_low",
                    models.IntegerField(
                        default=99999,
                        help_text="Number of low observations that must not be exceeded",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "security_gate_threshold_none",
                    models.IntegerField(
                        default=99999,
                        help_text="Number of none observations that must not be exceeded",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "security_gate_threshold_unkown",
                    models.IntegerField(
                        default=99999,
                        help_text="Number of unkown observations that must not be exceeded",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "jwt_validity_duration_user",
                    models.IntegerField(
                        default=168,
                        help_text="Validity duration of JWT tokens for regular users in hours",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "jwt_validity_duration_superuser",
                    models.IntegerField(
                        default=24,
                        help_text="Validity duration of JWT tokens for superusers in hours",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "base_url_frontend",
                    models.CharField(
                        default="",
                        help_text="Base URL of the frontend, used to set links in notifications correctly",
                        max_length=255,
                    ),
                ),
                (
                    "exception_ms_teams_webhook",
                    models.CharField(
                        blank=True,
                        help_text="MS Teams webhook to send exception notifications",
                        max_length=255,
                    ),
                ),
                (
                    "exception_slack_webhook",
                    models.CharField(
                        blank=True,
                        help_text="Slack webhook to send exception notifications",
                        max_length=255,
                    ),
                ),
                (
                    "exception_rate_limit",
                    models.IntegerField(
                        default=3600,
                        help_text="Timedelta in seconds when to send the same exception the next time",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "email_from",
                    models.CharField(
                        blank=True,
                        help_text="From address for sending email notifications",
                        max_length=255,
                    ),
                ),
                (
                    "exception_email_to",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated email addresses to send exception notifications",
                        max_length=255,
                    ),
                ),
                (
                    "background_product_metrics_interval_minutes",
                    models.IntegerField(
                        default=5,
                        help_text="Calculate product metrics every x minutes",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "background_epss_import_crontab_minutes",
                    models.IntegerField(
                        default=0,
                        help_text="Minutes crontab expression for EPSS import",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(59),
                        ],
                    ),
                ),
                (
                    "background_epss_import_crontab_hours",
                    models.IntegerField(
                        default=3,
                        help_text="Hours crontab expression for EPSS import (UTC)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(23),
                        ],
                    ),
                ),
                (
                    "branch_housekeeping_crontab_minutes",
                    models.IntegerField(
                        default=0,
                        help_text="Minutes crontab expression for branch housekeeping",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(59),
                        ],
                    ),
                ),
                (
                    "branch_housekeeping_crontab_hours",
                    models.IntegerField(
                        default=2,
                        help_text="Hours crontab expression for branch housekeeping (UTC)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(23),
                        ],
                    ),
                ),
                (
                    "branch_housekeeping_active",
                    models.BooleanField(
                        default=True, help_text="Delete inactive branches"
                    ),
                ),
                (
                    "branch_housekeeping_keep_inactive_days",
                    models.IntegerField(
                        default=30,
                        help_text="Days before incative branches and their observations are deleted",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "branch_housekeeping_exempt_branches",
                    models.CharField(
                        blank=True,
                        help_text="Regular expression which branches to exempt from deletion",
                        max_length=255,
                    ),
                ),
                (
                    "feature_vex",
                    models.BooleanField(
                        default=False,
                        help_text="Generate VEX documents in OpenVEX and CSAF format",
                    ),
                ),
            ],
        ),
    ]
