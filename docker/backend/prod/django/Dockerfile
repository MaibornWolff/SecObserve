FROM python:3.11.6-alpine as python

# Python build stage
FROM python as python-build-stage

ARG BUILD_ENVIRONMENT=prod

# Install packages
# kics-scan ignore-block
# versions of dependencies from distribution are ok
RUN apk add --no-cache --virtual .build-deps \
    ca-certificates gcc postgresql-dev linux-headers musl-dev libffi-dev mariadb-dev

# install dependencies with poetry
RUN pip install poetry==1.7.1

ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

WORKDIR /

COPY backend/pyproject.toml backend/poetry.lock ./
RUN poetry install --without dev,unittests --no-root && rm -rf $POETRY_CACHE_DIR


# Python 'run' stage
FROM python as python-run-stage

ARG BUILD_ENVIRONMENT=prod
ARG APP_HOME=/app
ARG VERSION=unkown

ENV PYTHONUNBUFFERED 1
ENV PYTHONDONTWRITEBYTECODE 1
ENV BUILD_ENV ${BUILD_ENVIRONMENT}

WORKDIR ${APP_HOME}

# Add user and group to avoid running as roolt
ARG user=django
ARG group=django

# copy dependencies from build stage
ENV VIRTUAL_ENV=/.venv \
    PATH="/.venv/bin:$PATH"
COPY --from=python-build-stage ${VIRTUAL_ENV} ${VIRTUAL_ENV}

# copy startup scripts
COPY ./docker/backend/prod/django/entrypoint /entrypoint
COPY ./docker/backend/prod/django/wait-for-it.sh /wait-for-it.sh

# copy application code to WORKDIR
COPY ./backend ${APP_HOME}

# use prod settings
COPY ./backend/config/settings/prod.py ${APP_HOME}/config/settings/dist.py

# certificates for MS Azure managed MySQL database
# single server
COPY ./docker/backend/prod/database/BaltimoreCyberTrustRoot_combined.crt.pem ${APP_HOME}/BaltimoreCyberTrustRoot_combined.crt.pem
# flexible server
COPY ./docker/backend/prod/database/DigiCertGlobalRootCA.crt.pem ${APP_HOME}/DigiCertGlobalRootCA.crt.pem

# kics-scan ignore-block
# versions of dependencies from distribution are ok
RUN addgroup -g 1001 -S ${group} \
    && adduser -u 1001 -S ${user} -G ${group} \
    # Install binaries and libs for PostgreSQL
    && apk add --no-cache --virtual postgresql-libs postgresql-client mariadb-dev mysql-client bash \
    # make startup scripts executable
    && chmod +x /entrypoint \
    && chmod +x /wait-for-it.sh \
    # insert version for status endpoint
    && sed -i 's/version_unkown/'"${VERSION}"'/g' ${APP_HOME}/application/commons/api/views.py \
    # make staticfiles writeable 
    && mkdir ${APP_HOME}/application/staticfiles \
    && chmod ugo+w ${APP_HOME}/application/staticfiles \
    # create directory for huey task queue
    && mkdir /var/lib/huey \
    && chown -R ${user}:${group} /var/lib/huey \
    && chmod ugo+rw /var/lib/huey \
    # create directory for possible sqlite db
    && mkdir /var/lib/sqlite \
    && chown -R ${user}:${group} /var/lib/sqlite \
    && chmod ugo+rw /var/lib/sqlite

HEALTHCHECK --interval=30s --timeout=30s --start-period=30s --retries=3 \
    CMD wget -nv -t1 --spider 'http://localhost:5000/api/status/health/' || exit 1

EXPOSE 5000

USER ${user}

ENTRYPOINT ["/entrypoint"]
